trigger:
- main

pr:
  branches:
    exclude:
      - fix/*

resources:
- repo: self

variables:
  - group: GitGroup

  # File paths for Helm, Opa, Python executions
  - name: helmChartPath
    value: '$(Build.SourcesDirectory)/webfrontendchart/'
  - name: valuesFile
    value: '$(Build.SourcesDirectory)/webfrontendchart/values.yaml'

  # For Github Operations
  - name: githubOrganization
    value: 'ameliawang0914'
  - name: githubRepository
    value: 'webapp'
  - name: targetBranch 
    value: 'fix/misconfig-$(Build.BuildId)'
  - name: commitMessage
    value: 'Fix the values and deployment based on detected misconfigurations'
  - name: pullRequestTitle
    value: 'Fix misconfigurations'
  - name: pullRequestDescription
    value: 'This PR fixes the values and deployment based on detected misconfigurations'
  - name: sourceBranch
    value: 'test'
  
  # Container registry service connection established during pipeline creation
  - name: dockerRegistryServiceConnection
    value: '6f845437-33a4-450f-b859-ecea9d2e6c0e'
  - name: imageRepository
    value: 'webapp'
  - name: containerRegistry
    value: 'amyacr.azurecr.io'
  - name: dockerfilePath
    value: '$(Build.SourcesDirectory)/Dockerfile'
  - name: tag
    value: '$(Build.BuildId)'

  # Agent VM image name
  - name: vmImageName
    value: 'ubuntu-latest'

stages:
- stage: Scan
  displayName: Scan source code deployment code
  jobs:
  - job: Scan
    displayName: Scan
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        echo "Installing Helm and OPA"
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        wget -O /usr/local/bin/opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
        chmod +x /usr/local/bin/opa
        echo "Helm and OPA installed"
      displayName: 'Installation of Helm and OPA completed successfully'
      continueOnError: false
    
    - script: |
        echo "Linting Helm charts....."
        helm lint $(helmChartPath)
        echo "Generating Helm template..."
        helm template release $(helmChartPath) > rendered.yaml
        echo "Running OPA policies..."
        opa eval --input rendered.yaml --data policy.rego 'data.kubernetes.admission.deny' -f pretty > misconfigs.json
        echo "Policy scanning completed"
        cat misconfigs.json
      displayName: 'OPA to Scan Helm Charts'
      continueOnError: false
    
    - script: |
        misconfigReport=$(cat misconfigs.json)
        if [ "$misconfigReport" != "[]" ]; then
          echo "Detected misconfiguration..."
          echo "Installing Python dependencies..."
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          echo "Execute fix_misconfig.py to change values.yaml"
          python fix_misconfig.py
        else
          echo "No misconfigurations detected by OPA."
        fi
      displayName: 'Python to Fix OPA Misconfigurations'
      continueOnError: false

    - task: Bash@3
      name: makePull
      inputs:
        targetType: inline
        script: |
          misconfigReport=$(cat misconfigs.json)
          if [ "$misconfigReport" != "[]" ]; then
            echo "Install GitHub CLI"
            sudo apt-get update
            sudo apt-get install -y gh
            echo "Installation of GitHub CLI completed successfully"

            echo 'Build.SourceBranchName'
            echo $(Build.SourceBranchName)
            echo 'targetBranch'
            echo $(targetBranch)
            echo 'sourceBranch'
            echo $(sourceBranch)

            git config --global user.email "yuewangapply@gmail.com"
            git config --global user.name "Wang Yue"

            git checkout -b $(targetBranch)

            # Assuming fix_misconfig.py made changes to the config file
            git add $(valuesFile)
            git commit -m "$(commitMessage)"
            git push https://$(gittoken)@github.com/$(githubOrganization)/$(githubRepository).git $(targetBranch)

            # Create Pull Request using GitHub CLI
            if ! gh auth status; then
              echo $(gittoken) | gh auth login --with-token
              echo "Authenticated to GitHub CLI with PAT"
            fi
            gh pr create --title "$(pullRequestTitle)" --body "$(pullRequestDescription)" --base $(sourceBranch) --head $(targetBranch)
            echo "##vso[task.setvariable variable=prCreated;isOutput=true]true"
            echo 'Created a pull request to merge from $(sourceBranch) into $(targetBranch)'
            echo $prCreated
            echo "miaomiao"
          else
            echo "Skip creating pull request."
            echo "##vso[task.setvariable variable=prCreated;isOutput=true]false"
            echo  $prCreated
            echo "wang wang"
          fi

- stage: Build
  displayName: Build and push stage
  dependsOn: Scan
  condition: eq(dependencies.Scan.outputs['Scan.setPrOutput.prCreated'], 'false')
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        echo "prCreated: $(prCreated)"
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)